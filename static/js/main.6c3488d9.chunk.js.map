{"version":3,"sources":["components/MovieCard.jsx","components/SearchResult.jsx","components/Header.jsx","components/Welcome.jsx","serviceWorker.js","index.js"],"names":["MovieCard","data","isFavorite","favColor","favorite","fasFaStar","farFaStar","poster","Poster","process","className","style","width","Image","variant","src","height","Body","Title","icon","Text","Year","SearchResult","movies","useGet","path","Response","Search","map","key","xs","imdbID","target","aria-expanded","aria-controls","mx","Error","App","e","preventDefault","movieName","document","getElementById","value","ReactDOM","render","Fragment","expand","light","backgroundColor","mb","Brand","href","display","align","mr","Toggler","navbar","id","Nav","inline","my","Input","type","placeholder","outline","primary","onClick","this","letSearch","Component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c3488d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card } from 'bootstrap-4-react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar as fasFaStar } from '@fortawesome/free-solid-svg-icons' // ES Module \"as\" syntax\r\nimport { faStar as farFaStar } from '@fortawesome/free-regular-svg-icons'\r\n\r\nexport function MovieCard({ data, isFavorite }) {\r\n    const favColor  = isFavorite === true ? 'warning' : 'dark';\r\n    const favorite  = isFavorite === true ? fasFaStar : farFaStar;\r\n    const poster    = data.Poster !== 'N/A' ? data.Poster : process.env.PUBLIC_URL + '/no-poster.jpg'; \r\n\r\n    function setFavorite (data, element) {\r\n        if(isFavorite){\r\n            localStorage.setItem(data.imdbID, data);\r\n        }else{\r\n            localStorage.removeItem(data.imdbID);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className=\"h-100 shadow-sm bg-white rounded\" style={{ width: '280px' }}>\r\n            <Card.Image variant=\"top\" src={ poster }  style={{ width: '280px', height: '340px' }} />\r\n            <Card.Body className=\"d-flex flex-column\">\r\n                <div className=\"d-flex mb-2 justify-content-between\">\r\n                    <Card.Title className=\"mb-0 font-weight-bold\">\r\n                        { data.Title }\r\n                    </Card.Title>\r\n                    <FontAwesomeIcon icon={ favorite } className={ 'text-' + favColor } />\r\n                </div>\r\n                <Card.Text className=\"text-secondary\">\r\n                    { data.Year }\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}","import React from 'react';\r\nimport { useGet } from \"restful-react\";\r\nimport { Container, Row, Col, BDiv } from 'bootstrap-4-react';\r\nimport { MovieCard } from './MovieCard';\r\n\r\nexport default function SearchResult(data) {\r\n    const { data: movies } = useGet({\r\n        path: \"https://www.omdbapi.com/?apikey=5b7ddec2&type=movie&s=\" + data.data\r\n    });\r\n    if(movies){\r\n        if(movies.Response === \"True\"){\r\n            return (\r\n                <div className=\"container\">\r\n                    <Container>\r\n                        <Row>\r\n                            { movies && (movies.Search.map((data, key) => (\r\n                                <Col xs={4} className=\"mb-5 mr-5\" key={ data.imdbID } target={'#movie' + data.imdbID} aria-expanded='false' aria-controls={data.imdbID}>\r\n                                    <MovieCard data={ data } isFavorite={ false } />\r\n                                </Col>\r\n                                )))\r\n                            }\r\n                        </Row>\r\n                    </Container>\r\n                </div>    \r\n            );\r\n        }else{\r\n            return (\r\n            <Container>\r\n                <BDiv mx=\"auto\" style={{ width: '800px' }}>\r\n                    <h2>¡{ movies.Error === \"Too many results.\" ? 'Su texto es demasiado genérico D: y no aguanto tanta información' : 'Su busqueda no arrojó resultados :C'}! </h2>\r\n                </BDiv>\r\n            </Container>\r\n            )\r\n        }\r\n    }else{\r\n        return (\r\n            <Container>\r\n                <BDiv mx=\"auto\" style={{ width: '637px' }}>\r\n                    <h2>Cargando... </h2>\r\n                </BDiv>\r\n            </Container>\r\n        )\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Navbar, Button, Form, Collapse, BImg } from 'bootstrap-4-react';\r\n\r\nimport SearchResult from './SearchResult';\r\n\r\nexport default class App extends Component {\r\n    letSearch(e) {\r\n        e.preventDefault();\r\n\r\n        const movieName = document.getElementById(\"searchText\").value;\r\n        if (movieName.value !== \"\") {\r\n            ReactDOM.render(<SearchResult data={movieName}  />, document.getElementById('content'));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const my_icon = process.env.PUBLIC_URL + '/logo.png';\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar expand=\"sm\" light style={{ backgroundColor: '#e3f2fd' }} mb=\"3\">\r\n                    <Navbar.Brand href=\"./\">\r\n                      <BImg\r\n                        src={my_icon}\r\n                        width=\"180\"\r\n                        height=\"45\"\r\n                        display=\"inline-block\"\r\n                        align=\"top\"\r\n                        mr=\"1\"\r\n                      />\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggler target=\"#searchToggle\" />\r\n                    <Collapse navbar id=\"searchToggle\">\r\n                        <Navbar.Nav mr=\"auto\">\r\n                        </Navbar.Nav>\r\n                        <Form inline my=\"2 lg-0\">\r\n                            <Form.Input type=\"search\" placeholder=\"Película\" mr=\"sm-2\" id=\"searchText\" />\r\n                            <Button outline primary my=\"2 sm-0\" onClick={this.letSearch}>Buscar</Button>\r\n                        </Form>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { BDiv } from 'bootstrap-4-react';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n        <BDiv mx=\"auto\" style={{ width: '637px' }}>\r\n            <h2>¡Busca una película en el buscador superior!</h2>\r\n        </BDiv>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Header from './components/Header';\nimport Welcome from './components/Welcome';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Header />, document.getElementById('header'));\n\nReactDOM.render(<Welcome />, document.getElementById('content'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}